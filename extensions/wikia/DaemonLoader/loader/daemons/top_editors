#!/usr/bin/perl

my $wikia_lib;
BEGIN {
	$wikia_lib = "/home/moli/wikia/wikia-utils/lib/"; 
	$wikia_lib = "/home/wikicities/conf/mediawiki/wikia-utils/lib" if !(-e $wikia_lib);
}

=needed modules
=cut
use DBI;
use Cwd;
use Getopt::Long;
use Data::Dumper;

use Date::Manip;
use Switch;
use Spreadsheet::WriteExcel::Big;

use lib $wikia_lib;
use Wikia::Config;
use Wikia::Utils;
use Wikia::DB;

=default values
=cut
my $email_title = "Top editors";
my $DEF_LIMIT = 1000;
my $DEF_MONTHS = 12;
my $XLS_FILE = "/home/reports/top_editors/top_editors_" . substr (&ParseDate("today"), 0, 8) . ".xls";

=list of namespaces 
=cut
use constant NS_BLOG_ARTICLE => "500";
use constant NS_BLOG_ARTICLE_TALK => "501";
use constant NS_BLOG_LISTING => "502";
use constant NS_BLOG_LISTING_TALK => "503";
use constant NS_VIDEO => "400";
use constant NS_VIDEO_TALK => "401";
use constant NS_MAIN => "0";
use constant NS_IMAGE => "6";

=help function
=cut
sub usage() {
    print <<EOF
video_blog_usage [--help] [--usedb=s] 
	help - print this text
	months - number of month to check (default 1 (last month))
	limit - limit of users
	TASKID - identifier of job
EOF
;	
}

=info
========================================
Main program 
========================================
=cut

=read script args 
=cut
my ($help, $months, $limit, $TASKID) = @_;
GetOptions('help' => \$help, 'months=s' => \$months, 'limit=s' => \$limit, 'TASKID=s' => \$TASKID);

my @ltime = localtime;

=checking args
=cut
if ($help) {
	&usage();
	exit;
} elsif (!$TASKID) {
	print STDERR "Use option --help to know how to use script \n";
	exit;
}

=config -> set logfile 
=cut
my $oConf = new Wikia::Config( {logfile => "/tmp/top_editors.log"} );

=db archive connection
=cut
my $db_ext = new Wikia::DB( {"host" => DB_EXT_SLAVE} );

=wikia utils 
=cut
my $oUtils = new Wikia::Utils();

=db slave connection
=cut
my $db = new Wikia::DB( {"host" => DB_SLAVE} );

$limit = $DEF_LIMIT unless $limit;
$months = $DEF_MONTHS unless $months;

=get task info
=cut
$oConf->log("\n\nTask ID: $TASKID started");

=get task info
=cut
$oConf->log("Processing: get task information");
my $task = $db_ext->get_daemon_task($TASKID);
my ($DATA, $DATAALL, $DATAMOST) = ();
=foreach wiki generate data 
=cut
my %nspaceNames = (
	NS_BLOG_ARTICLE() => "User_blog",
	NS_BLOG_ARTICLE_TALK() => "User_blog_comment",
	NS_BLOG_LISTING() => "Blog",
	NS_BLOG_LISTING_TALK() => "Blog_talk",
	NS_VIDEO() => "Video",
	NS_VIDEO_TALK() => "Video_talk",
	NS_MAIN() => "Main",
	NS_IMAGE() => "Image",
);

=build dates structure 
=cut
my $dates = $oUtils->get_dates($months, "month", "now", "$months months ago");
my @dates = ();
if (scalar @$dates) {		
	@dates = map { substr ($_, 0, 6) } @$dates;
}
my $other_wikis = "5, 11, 425, 520, 2719, 5409";

$oConf->log("Processing: select users from local users table");
my $select = "lu_user_id as user_id, lu_user_name as user_name, sum(lu_rev_cnt) as cnt";
my $from = "`dataware`.`city_local_users`";
my @where = ( 
	"lu_singlegroup != 'Bot'",
	"lu_wikia_id not in (".$other_wikis.")"
);
my @options = (
	"group by 1, 2",
	"ORDER BY cnt desc",
	"LIMIT ". $limit
); 

my %USERS = ();
my %TOP_EDITORS = ();
$sth = $db_ext->select_many($select, $from, \@where, \@options);
if ($sth) {
	while(my $values = $sth->fetchrow_hashref()) {
		%{$USERS{$values->{user_id}}} = ('all' => $values->{cnt}, 'name' => $values->{user_name});
		$TOP_EDITORS{$values->{user_id}} = $values->{cnt};
	}
	$sth->finish();
}

my %USERS_WIKIS = ();
foreach my $user_id (sort keys %USERS) {
	$select = "lu_wikia_id as city_id, count(*) as cnt";
	$from = "`dataware`.`city_local_users`";
	@where = ( "lu_user_id = " . $db_ext->handler->quote($user_id) , "lu_wikia_id not in (".$other_wikis.")" );
	@options = ( "GROUP BY lu_wikia_id", "ORDER BY cnt desc, lu_wikia_id" );
	$sth = $db_ext->select_many($select, $from, \@where, \@options);
	if ($sth) {
		while(my $values = $sth->fetchrow_hashref()) {
			$USERS_WIKIS{$user_id} = () unless $USERS_WIKIS{$user_id};
			push @{$USERS_WIKIS{$user_id}}, $values->{city_id};
		}
		$sth->finish();
	}
}

=get all Wikis
=cut
my @where_db = ("1 = 1");
my $databases = $db->get_wikis(\@where_db);
my $hubs = $db->getWikiCats();

foreach my $user_id (sort keys %USERS) {
	#--- set start time
	my $start_sec = time();
	$oConf->log($USERS{$user_id}{name} . " processed (user_id: ".$user_id.")");
	
=get home Wiki for user
=cut
	$select = "city_id";
	$from = "`dataware`.`user_login_history`";
	@where = ("ulh_from = 2", "user_id = ".$user_id);	
	@options = ();
	my ($oRow) = $db_ext->select($select, $from, \@where, \@options);
	my $homeCityId = $oRow->{city_id};
	
=get list of wikis, where user edited something
=cut
	my @wikis = $USERS_WIKIS{$user_id};

	$USERS{$user_id}{home} = $databases->{$homeCityId};
	$USERS{$user_id}{hub} = $hubs->{$homeCityId};
=processing for every Wiki
=cut
	$oConf->log("Selected list of Wikis for selected users (" .scalar(@wikis). ")");
	foreach (@wikis) {
		my $city_id = $_;
		my $dbname = $databases->{$city_id};
		
		$homeCityId = $city_id unless ($homeCityId);

		$db_ext->handler->ping();
		$oConf->log("processing Wiki: ".$dbname);

		my $contentNS = $db->getContentNS($city_id);
		$contentNS = 0 unless $contentNS;
		
		foreach (@dates) {
			my $date = $_;
			$oConf->log("Get revision for date " . $date);
			$USERS{$user_id}{$date} = 0 unless $USERS{$user_id}{$date};

			$db->handler->ping();
		
			$select = "count(*) as cnt";
			$from = "`".$dbname."`.`revision`";
			@where = (
				"rev_user = '".$user_id."'",
				"rev_page in (select page_id from `".$dbname."`.`page` where page_namespace in (".$contentNS.") and page_is_redirect = 0)",
				"date_format(rev_timestamp, '%Y%m') = '".$date."'"
			);
			my @options = ();
		
			my $cnt = 0;
			my ($oRowCnt) = $db->select($select, $from, \@where, \@options);
			$cnt = $oRowCnt->{cnt};
			$cnt = 0 unless $cnt;
			$USERS{$user_id}{$date} = $USERS{$user_id}{$date} + $cnt;
		}
	}
=end of main loop
=cut
	my $end_sec = time();
	my @ts = gmtime($end_sec - $start_sec);

	$oConf->log($user_id . " processed ".sprintf ("%d hours %d minutes %d seconds",@ts[2,1,0]) . "\n\n");
}

=checking results
=cut
$oConf->log("checking results and build XLS file");
my $res = ();

if (! scalar keys %USERS) {
	$oConf->log("No data found for parameters");
	exit;
}

=XLS - default settings ========================
=init XLS spreadsheet
=cut
my $dir = "/home/reports/top_editors/";
mkdir($dir) if (!(-e $dir)) ;
unlink ($XLS_FILE);


my $workbook = Spreadsheet::WriteExcel::Big->new($XLS_FILE);
my @cols = (A..Z, AA..AZ);
my $formatHdr = $workbook->add_format( bold => 1, color => 'black', align => 'center');
my $formatBody = $workbook->add_format( bold => 0, color => 'black', valign => 'vcenter', align => 'right');

=create XLS sheet with data
=cut
my $sheet = $workbook->add_worksheet('Top editors');
$sheet->activate();
my ($col, $row) = (0, 2); 
$sheet->write($row, $col, "Editor", $formatHdr); 
$sheet->write($row, $col+1, "Editor Id", $formatHdr); 
$sheet->write($row, $col+2, "Total edits", $formatHdr); 
$sheet->write($row, $col+3, "Home wiki", $formatHdr); 
$sheet->write($row, $col+4, "Hub", $formatHdr); 
my $i = 5;
foreach (@dates) {
	$sheet->write($row, $col+$i, $_, $formatHdr); 
	$i++;
}

foreach my $user_id (sort { $TOP_EDITORS{$b} <=> $TOP_EDITORS{$a} } keys %TOP_EDITORS) {
	$i = 0; $row++;
	$sheet->write($row, $col+$i, $USERS{$user_id}{name}, $formatBody); $i++;
	$sheet->write($row, $col+$i, $user_id, $formatBody); $i++;
	$sheet->write($row, $col+$i, $USERS{$user_id}{all}, $formatBody); $i++;
	$sheet->write($row, $col+$i, $USERS{$user_id}{home}, $formatBody); $i++;
	$sheet->write($row, $col+$i, $USERS{$user_id}{hub}, $formatBody); $i++;
	foreach (@dates) {
		$sheet->write($row, $col+$i, $USERS{$user_id}{$_}, $formatBody);$i++;
	}
}
=close XLS file
=cut
$workbook->close();

=finish
=cut
system("gzip -c $XLS_FILE > $XLS_FILE.gz") if ( -e $XLS_FILE );
%update = ("-dj_result_file" => "concat_ws(',', dj_result_file, '".$XLS_FILE.".gz')");
$oConf->log("update task info in database (subdomains)");
$q_up = $db_ext->update_daemon_task( \%update, $TASKID );
if ( $q_up ) {
	$oConf->log("send emails with report");
	$oUtils->send_file( $email_title, $task->{dj_result_emails}, $XLS_FILE . ".gz" );
}
$oConf->log("process done");

1;
